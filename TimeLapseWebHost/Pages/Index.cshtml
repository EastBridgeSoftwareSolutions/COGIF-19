@page
@model IndexModel
@inject IFileStore _fileStore
@{
    ViewData["Title"] = "Home page";
}

    <div>
        <h1 class="display-4">Welcome</h1>

        @{
            if (User.Identity.IsAuthenticated)
            {
                <div x-data="data()" x-init="initCamera" class="flex flex-row flex-wrap justify-between">
                    <article x-show="gif.exists" class="inline-block overflow-hidden rounded-lg shadow-lg mb-6">
                        <img x-bind:src="gif.path" />
                    </article>

                    <article class="inline-block overflow-hidden rounded-lg shadow-lg mb-6">

                        <video x-ref="video" x-show="!snapped" x-bind:width="gif.width" x-bind:height="gif.height" autoplay></video>
                        <canvas x-ref="canvas" x-show="snapped" x-bind:width="gif.width" x-bind:height="gif.height"></canvas>

                        <footer class="flex flex-row-reverse items-center justify-between leading-none p-2 md:p-4">
                            <button x-show="!snapped" @@click="snap" type="button" class="btn btn-secondary">Snap Photo</button>
                            <button x-show="snapped" @@click="submit" type="button" class="btn btn-primary">Save Photo</button>
                            <button x-show="snapped" @@click="cancel" type="button" class="btn btn-danger">Try again</button>
                        </footer>

                    </article>
                </div>
            }
        }
    </div>

@section Scripts
{
    <script>
        const data = () => ({
            gif: {
                exists: @Json.Serialize(_fileStore.UserHasGif(User)),
                path: @Json.Serialize(_fileStore.GetRelativeGifPath(User)),
                width: 640,
                height: 480
            },
            snapped: false,
            snap() {
                const self = this;
                this.snapped = true;
                this.$nextTick(() => {
                    const { width, height } = self.gif;
                    self.$refs.canvas.getContext('2d').drawImage(self.$refs.video, 0, 0, width, height);
                });
            },
            submit() {
                this.$refs.canvas.toBlob(function (blob) {
                    const formData = new FormData();
                    formData.append('UploadedFile', blob, 'UploadedFile.png');

                    fetch('', {
                        method: 'post',
                        body: formData,
                    }).then(() => location.reload())
                });
            },
            cancel() {
                this.snapped = false;
            },
            initCamera() {
                const video = this.$refs.video;
                // Get access to the camera!
                if (video && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                    // Not adding `{ audio: true }` since we only want video now
                    navigator.mediaDevices.getUserMedia({ video: true }).then(function (stream) {
                        video.srcObject = stream;
                        video.play();
                    });
                }
            }
        });
    </script>
}